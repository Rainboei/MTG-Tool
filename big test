# Define valid mana colors with shorthand notation
MANA_COLORS = {"White": "W", "Blue": "U", "Black": "B", "Red": "R", "Green": "G", "Colorless": "C"}


class ManaPool:
  """
  Represents a player's mana pool.
  Supports adding, spending, and resetting mana of all valid colors.
  """
  def __init__(self):
    # Initialize mana pool with all colors set to 0
    self.pool = {color: 0 for color in MANA_COLORS}
  
  def add_mana(self, color, amount=1):
    """Add a specified amount of mana of a specific color to the pool."""
    if color in self.pool:
      self.pool[color] += amount
      print(f"Added {amount} {color} mana. Current mana pool: {self}")
    else:
      print(f"Invalid mana color: {color}")
  
  def spend_mana(self, cost):
    """
    Attempt to spend mana from the pool.
    The cost should be a dictionary: {"White": 1, "Blue": 2, ...}.
    Returns True if the cost can be paid, otherwise False.
    """
    # Check if sufficient mana is available for each color in the cost
    for color, amount in cost.items():
      if self.pool.get(color, 0) < amount:
        print(f"Not enough {color} mana to pay the cost!")
        return False
    
    # Deduct the mana from the pool after verifying
    for color, amount in cost.items():
      self.pool[color] -= amount
    print(f"Mana spent: {cost}. Remaining pool: {self}.")
    return True
    
  def reset_pool(self):
    """Resets all mana in the pool to 0 at the end of a turn."""
    self.pool = {color: 0 for color in self.pool}
    print("Mana pool has been reset.")
  
  def __str__(self):
    """Return a formatted string representing the current mana pool."""
    return ", ".join(f"{MANA_COLORS[color]}: {amount}" for color, amount in self.pool.items() if amount > 0)
  

class Card:
  """
  Base class for all cards, supporting colored mana costs.
  """
  def __init__(self, name, cost, card_type):
    self.name = name
    # Cost is represented as a dictionary: {"White": 1, "Blue": 0, "Green": 2, ...}
    self.cost = {color: cost.get(color, 0) for color in MANA_COLORS}
    self.card_type = card_type
    self.tapped = False
    self.zone = "Library"
  
  def is_playable(self, mana_pool):
    """
    Determine if the card can be played with the given mana pool.
    Returns True if playable, otherwise False.
    """
    for color, amount in self.cost.items():
      if mana_pool.pool.get(color, 0) < amount:
        return False
      return True
    
  def __str__(self):
    """Return a detailed string representation of the card."""
    cost_str = ", ".join(f"{MANA_COLORS[color]}: {amount}" for color, amount in self.cost.items() if amount > 0)
    tapped_status = "Tapped" if self.tapped else "Untapped"
    return f"{self.name} ({self.card_type}) - Cost: {cost_str}, Status: {tapped_status}, Zone: {self.zone}"


class Player:
  """
  Represents a player with a mana pool, hand, library, battlefield, and graveyard.
  """
  def __init__(self, name):
    self.name = name
    self.life_total = 20
    self.mana_pool = ManaPool()
    self.library = [] # Deck of cards
    self.hand = [] # Cards in hand
    self.battlefield = [] # Cards on the battlefield
    self.graveyard = [] # Cards in the graveyard
    
  def draw_card(self):
    """Draw the top card of the library and add it to the hand"""
    if self.library:
      card = self.library.pop(0)
      self.hand.append(card)
      card.zone = "Hand"
      print(f"{self.name} drew {card.name}.")
    else:
      print(f"{self.name} has no card left in the library!")
    
  def play_card(self, card):
    """
    Attempt to play a card from the hand.
    If successful, the card is moved to the battlefield, and its cost is paid.
    """
    if card in self.hand and card.is_playable(self.mana_pool):
      # Spend mana and move the card to the battlefield
      self.mana_pool.spend_mana(card.cost)
      self.hand.remove(card)
      self.battlefield.append(card)
      card.zone = "Battlefield"
      print(f"{self.name} played {card.name}.")
    else:
      print(f"{self.name} cannot play {card.name} (not enough mana or not in hand).")
  
  def __str__(self):
    """Return a detailed string representation of the player's state."""
    return (f"Player: {self.name}, Life Total: {self.life_total}\n"
            f"Mana Pool: {self.mana_pool}\n"
            f"Hand: {[card.name for card in self.hand]}\n"
            f"Battlefield: {[card.name for card in self.battlefield]}\n"
            f"Graveyard: {[card.name for card in self.graveyard]}")
